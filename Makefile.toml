env_files = ["./common.env"]

env_scripts = [
'''
#!/bin/sh
echo "--- Using Environments -----------------"
echo "AWS_PROFILE      = $AWS_PROFILE"
echo "AWS_REGION       = $AWS_REGION"
echo "PREFIX           = $PREFIX"
echo "APPLICATION_NAME = $APPLICATION_NAME"
echo "----------------------------------------"
'''
]

[env]
CARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = true
RUST_BACKTRACE=1
RUST_TEST_THREADS=1
WRITE_API_SERVER_PORT = 18080
READ_API_SERVER_PORT = 18082
WRITE_API_SERVER_BASE_URL = "http://localhost:${WRITE_API_SERVER_PORT}"
READ_API_SERVER_BASE_URL = "http://localhost:${READ_API_SERVER_PORT}"

[env.production]
WRITE_API_SERVER_PORT = 443
READ_API_SERVER_PORT = 443
WRITE_API_SERVER_BASE_URL = "https://write-ceer-j5ik2o.cwtest.info"
READ_API_SERVER_BASE_URL = "https://read-ceer-j5ik2o.cwtest.info"

#[env.TEST]
#script = ['''
#if [[ "1" == "0" ]]; then
#echo ABC
#else
#echo DEF
#fi
#''']

#[tasks.echo]
#workspace = false
#script = ['''
#echo ${TEST}
#''']

[tasks.sphinx]
workspace = false
command = "cargo"
args = ["sphinx"]

[tasks.fmt]
description = "ソースコードをフォーマットします"
workspace = false
install_script = ['''
#!/bin/sh
rustup which rustfmt --toolchain nightly
if [[ $? -ne 0 ]]; then
  rustup install nightly
fi
''']
script = '''
#!/bin/sh
cargo +nightly fmt
'''

[tasks.terraform-create-lock-table]
workspace = false
condition_script = ["./tools/terraform/exisits-terraform-lock-table.sh"]
command = "./tools/terraform/create-lock-table.sh"

[tasks.terraform-create-tf-bucket]
workspace = false
condition_script = ["./tools/terraform/exisits-terraform-lf-bucket.sh"]
command = "./tools/terraform/create-tf-bucket.sh"

[tasks.terraform-init]
workspace = false
command = "./tools/terraform/terraform-init.sh"

[tasks.terraform-plan]
workspace = false
command = "./tools/terraform/terraform-plan.sh"

[tasks.terraform-apply]
workspace = false
command = "./tools/terraform/terraform-apply.sh"
args = ["-auto-approve"]

[tasks.terraform-destroy]
workspace = false
command = "./tools/terraform/terraform-destroy.sh"
args = ["-auto-approve"]

[tasks.update-kubeconfig]
workspace = false
command = "./tools/terraform/update-kubeconfig.sh"

[tasks.export-auth-config-map]
workspace = false
command = "./tools/terraform/export-auth-config-map.sh"

[tasks.apply-auth-config-map]
workspace = false
command = "./tools/terraform/apply-auth-config-map.sh"

# docker-build write-api-server

[tasks.docker-build-write-api-server-amd64]
description = "Docker build for write-api-server on amd64"
workspace = false
command = "./tools/scripts/docker-build-write-api-server.sh"
args = ["amd64"]

[tasks.docker-build-write-api-server-arm64]
workspace = false
command = "./tools/scripts/docker-build-write-api-server.sh"
args = ["arm64"]

[tasks.docker-build-write-api-server]
workspace = false
run_task = { name = ["docker-build-write-api-server-amd64", "docker-build-write-api-server-arm64"], parallel = true }

# docker-build read-api-server

[tasks.docker-build-read-api-server-amd64]
workspace = false
command = "./tools/scripts/docker-build-read-api-server.sh"
args = ["amd64"]

[tasks.docker-build-read-api-server-arm64]
workspace = false
command = "./tools/scripts/docker-build-read-api-server.sh"
args = ["arm64"]

[tasks.docker-build-read-api-server]
workspace = false
run_task = { name = ["docker-build-read-api-server-amd64", "docker-build-read-api-server-arm64"], parallel = true }

# docker-build read-model-updater
[tasks.docker-build-read-model-updater-prod-amd64]
workspace = false
command = "./tools/scripts/docker-build-read-model-updater.sh"

[tasks.docker-build-read-model-updater-local-amd64]
workspace = false
command = "./tools/scripts/docker-build-read-model-updater-local.sh"

# docker-build-all

[tasks.docker-build-prod-all]
workspace = false
run_task = { name = ["docker-build-write-api-server", "docker-build-read-api-server", "docker-build-read-model-updater-prod-amd64"], parallel = true }

[tasks.docker-build-local-all]
workspace = false
run_task = { name = ["docker-build-write-api-server", "docker-build-read-api-server", "docker-build-read-model-updater-local-amd64"], parallel = true }

# docker-compose-up

[tasks.docker-compose-up-db]
workspace = false
command = "./tools/scripts/docker-compose-up.sh"
args = ["-d"]

[tasks.docker-compose-up]
workspace = false
command = "./tools/scripts/docker-compose-up.sh"

[tasks.docker-compose-down]
workspace = false
command = "./tools/scripts/docker-compose-down.sh"

# ---------------------------------------------

[tasks.docker-ecr-push-write-api-server]
workspace = false
command = "./tools/scripts/docker-ecr-push-write-api-server.sh"

[tasks.docker-ecr-push-read-api-server]
workspace = false
command = "./tools/scripts/docker-ecr-push-read-api-server.sh"

[tasks.docker-ecr-push-read-model-updater]
workspace = false
command = "./tools/scripts/docker-ecr-push-read-model-updater.sh"

# ecr-push
[tasks.aws-ecr-login]
workspace = false
command = "./tools/scripts/aws-ecr-login.sh"

[tasks.docker-build-ecr-push-write-api-server]
workspace = false
dependencies = ["docker-build-write-api-server", "aws-ecr-login", "docker-ecr-push-write-api-server"]

[tasks.docker-build-ecr-push-read-api-server]
workspace = false
dependencies = ["docker-build-read-api-server", "aws-ecr-login" , "docker-ecr-push-read-api-server"]

[tasks.docker-ecr-build-push-all]
workspace = false
run_task = { name = ["docker-build-prod-all", "docker-ecr-push-write-api-server", "docker-ecr-push-read-api-server"] }

# -------

[tasks.helmfile-diff-write-api-server]
workspace = false
env = { "OPTS" = "--group=write-api-server" }
command = "./tools/scripts/helmfile.sh"
args = ["diff"]

[tasks.helmfile-diff-read-api-server]
workspace = false
env = { "OPTS" = "--group=read-api-server" }
command = "./tools/scripts/helmfile.sh"
args = ["diff"]

[tasks.helmfile-diff-refinery]
workspace = false
env = { "OPTS" = "--group=refinery" }
command = "./tools/scripts/helmfile.sh"
args = ["diff"]

[tasks.helmfile-diff-all]
workspace = false
command = "./tools/scripts/helmfile.sh"
args = ["diff"]

# ---

[tasks.helmfile-apply-write-api-server]
workspace = false
env = { "OPTS" = "--group=write-api-server" }
command = "./tools/scripts/helmfile.sh"
args = ["apply"]

[tasks.helmfile-apply-read-api-server]
workspace = false
env = { "OPTS" = "--group=read-api-server" }
command = "./tools/scripts/helmfile.sh"
args = ["apply"]

[tasks.helmfile-apply-refinery]
workspace = false
env = { "OPTS" = "--group=refinery" }
command = "./tools/scripts/helmfile.sh"
args = ["apply"]

[tasks.helmfile-apply-all]
workspace = false
command = "./tools/scripts/helmfile.sh"
args = ["apply"]

# ---

[tasks.helmfile-destroy-write-api-server]
workspace = false
env = { "OPTS" = "--group=write-api-server" }
command = "./tools/scripts/helmfile.sh"
args = ["destroy"]

[tasks.helmfile-destroy-read-api-server]
workspace = false
env = { "OPTS" = "--group=read-api-server" }
command = "./tools/scripts/helmfile.sh"
args = ["destroy"]

[tasks.helmfile-destroy-refinery]
workspace = false
env = { "OPTS" = "--group=refinery" }
command = "./tools/scripts/helmfile.sh"
args = ["destroy"]

[tasks.helmfile-destroy-all]
workspace = false
command = "./tools/scripts/helmfile.sh"
args = ["destroy"]

# -------

[tasks.kubectl-get-ingress-write-api-server]
workspace = false
script = '''
kubectl -n ceer get ingress write-api-server
'''

[tasks.update-dns-write-api-server]
workspace = false
script = '''
./tools/scripts/aws-route53-upsert-external-dns-of-write-api-server.sh
'''

[tasks.kubectl-get-ingress-read-api-server]
workspace = false
script = '''
kubectl -n ceer get ingress read-api-server
'''

[tasks.update-dns-read-api-server]
workspace = false
script = '''
./tools/scripts/aws-route53-upsert-external-dns-of-read-api-server.sh
'''

[tasks.update-dns-all]
workspace = false
run_task = { name = ["update-dns-write-api-server", "update-dns-read-api-server"] }

# -------

[tasks.curl-get-root-write-api-server]
workspace = false
script = '''
curl -s -X GET ${WRITE_API_SERVER_BASE_URL}
echo ""
'''

[tasks.curl-get-root-read-api-server]
workspace = false
script = '''
curl -s -X GET ${READ_API_SERVER_BASE_URL}
echo ""
'''

[tasks.curl-get-root]
workspace = false
dependencies = ["curl-get-root-write-api-server", "curl-get-root-read-api-server"]

[tasks.open-graphql-ide]
workspace = false
script = '''
open ${READ_API_SERVER_BASE_URL}/graphql
'''

[tasks.create-thread]
workspace = false
script = '''
./tools/scripts/curl-post-create-thread.sh | jq .
'''

[tasks.create-and-get-thread]
workspace = false
script = '''
export THREAD_ID=$(./tools/scripts/curl-post-create-thread.sh | jq -r .Success.id.value)
echo "create-thread: THREAD_ID=${THREAD_ID}"
sleep 1
ACTUAL_ID=$(./tools/scripts/curl-post-get-thread.sh | jq -r .data.getThread.id)
echo "get-thread: ACTUAL_THREAD_ID=${ACTUAL_ID}"
if [ "${THREAD_ID}" = "${ACTUAL_ID}" ]; then
  echo "OK"
else
  echo "NG"
fi
'''
