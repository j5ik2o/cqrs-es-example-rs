# https://github.com/chatwork/charts/tree/master/akka
image:
  repository: '{{ .Values.writeApiServer.image.repository }}'
  tag: '{{ env "WRITE_API_SERVER_IMAGE_TAG" | default .Values.writeApiServer.image.tag}}'
  pullPolicy: '{{ .Values.writeApiServer.image.pullPolicy }}'

{{- if .Values.ecrCred.enabled }}
imagePullSecrets:
  - name: ecr-cred-regcred
{{- end }}

service:
  enabled: true
{{- if eq .Values.writeApiServer.service.type "LoadBalancer" }}
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    external-dns.alpha.kubernetes.io/hostname: '{{ .Values.writeApiServer.hostname }}'
{{- end }}
  labels: {}
  type: {{ .Values.writeApiServer.service.type }}
  targetPort: http
  name: http
  port: {{ .Values.writeApiServer.service.port }}
{{- if (and (eq .Values.writeApiServer.service.type "NodePort") ( .Values.writeApiServer.service.nodePort)) }}
  nodePort: {{ .Values.writeApiServer.service.nodePort }}
{{- end }}
  protocol: TCP

{{- if .Values.writeApiServer.ingress.enabled }}
ingress:
  enabled: true
  annotations:
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/backend-protocol-version: HTTP1
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS":443}]'
    alb.ingress.kubernetes.io/certificate-arn: {{ .Values.writeApiServer.ingress.alb.certificateArn }}
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: "10"
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: "5"
    alb.ingress.kubernetes.io/healthy-threshold-count: "5"
    alb.ingress.kubernetes.io/unhealthy-threshold-count: "2"
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/scheme: {{ .Values.writeApiServer.ingress.alb.scheme }}
  className: alb
  hosts:
    - host: {{ .Values.writeApiServer.hostname }}
      paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: write-api-server
              port:
                number: {{ .Values.writeApiServer.service.port }}
{{- end }}

affinity: {}

env:
  {{- with .Values.writeApiServer.env }}
  {{- toYaml . | nindent 2 }}
  {{- end }}
  - name: "AWS_REGION"
    value: {{ requiredEnv "AWS_REGION" }}

lifecycle:
  preStop:
    exec:
      command: [ "sh", "-c", "sleep {{ .Values.writeApiServer.processTimeoutInSec }}" ]

livenessProbe:
  enabled: false
  initialDelaySeconds: 15
  periodSeconds: 5
  timeoutSeconds: 1
  successThreshold: 1
  failureThreshold: 3

podAnnotations: {}

podLabels: {}

startupProbe:
  enabled: false

readinessProbe:
  enabled: false
  initialDelaySeconds: 15
  periodSeconds: 5
  timeoutSeconds: 1
  successThreshold: 1
  failureThreshold: 3

replicaCount: {{ .Values.writeApiServer.replicaCount }}

resources:
  {{- toYaml .Values.writeApiServer.resources | nindent 2 }}

strategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 10%
    maxUnavailable: 0%

terminationGracePeriodSeconds:  {{ add .Values.writeApiServer.processTimeoutInSec 5 }}

rbac:
  create: true

serviceAccount:
  create: {{ .Values.writeApiServer.serviceAccount.create }}
{{- if .Values.writeApiServer.serviceAccount.name }}
  name: {{ .Values.writeApiServer.serviceAccount.name }}
{{- end }}

podDisruptionBudget:
  enabled: true
  maxUnavailable: 1

autoscaling:
  {{- toYaml .Values.writeApiServer.autoscaling | nindent 2 }}

metrics:
  enabled: false
  port: 9095
  path: "/"

configmaps:
  chart.conf: ""
  akka.conf: ""
  kamon.conf: ""

useResourceApplicationConf: false
